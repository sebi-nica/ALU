//generated by Digital

module shift_reg_16 (
  input clk,
  input rst,
  input [7:0] in,
  input [1:0] load,
  input bit_in,
  input [1:0] sel,
  output [15:0] out,
  output bit_out
);
  wire [7:0] s0;
  wire [7:0] s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  assign s2 = ~ sel[0];
  assign s8 = load[0];
  assign s7 = load[1];
  Mux_2x1 Mux_2x1_i0 (
    .sel( s2 ),
    .in_0( bit_in ),
    .in_1( s3 ),
    .out( s4 )
  );
  Mux_2x1 Mux_2x1_i1 (
    .sel( s2 ),
    .in_0( s5 ),
    .in_1( bit_in ),
    .out( s6 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( s2 ),
    .in_0( s3 ),
    .in_1( s5 ),
    .out( bit_out )
  );
  // A
  shift_reg_8 shift_reg_8_i3 (
    .clk( clk ),
    .rst( rst ),
    .in( in ),
    .load( s7 ),
    .sel( sel ),
    .bit_in( s4 ),
    .out( s1 ),
    .bit_out( s5 )
  );
  // Q
  shift_reg_8 shift_reg_8_i4 (
    .clk( clk ),
    .rst( rst ),
    .in( in ),
    .load( s8 ),
    .sel( sel ),
    .bit_in( s6 ),
    .out( s0 ),
    .bit_out( s3 )
  );
  assign out[7:0] = s0;
  assign out[15:8] = s1;
endmodule
